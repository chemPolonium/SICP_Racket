#lang sicp

(define (distinct? items)
  (cond [(null? items) true]
        [(null? (cdr items)) true]
        [(member (car items) (cdr items)) false]
        [else (distinct? (cdr items))]))

(define (multiple-dwelling)
  (let cooper-iter ([cooper-list (list 2 3 4 5)])
    (if (null? cooper-list)
        (error "no valid solution")
        (let ([cooper (car cooper-list)])
          (let miller-iter ([miller-list (list 3 4 5)])
            (if (null? miller-list)
                (cooper-iter (cdr cooper-list))
                (let ([miller (car miller-list)])
                  (if (not (> miller cooper))
                      (miller-iter (cdr miller-list))
                      (let fletcher-iter ([fletcher-list (list 2 3 4)])
                        (if (null? fletcher-list)
                            (miller-iter (cdr miller-list))
                            (let ([fletcher (car fletcher-list)])
                              (if (= (abs (- fletcher cooper)) 1)
                                  (fletcher-iter (cdr fletcher-list))
                                  (let smith-iter ([smith-list (list 1 2 3 4 5)])
                                    (if (null? smith-list)
                                        (fletcher-iter (cdr fletcher-list))
                                        (let ([smith (car smith-list)])
                                          (if (= (abs (- smith fletcher)) 1)
                                              (smith-iter (cdr smith-list))
                                              (let baker-iter ([baker-list (list 1 2 3 4)])
                                                (if (null? baker-list)
                                                    (smith-iter (cdr smith-list))
                                                    (let ([baker (car baker-list)])
                                                      (if (not (distinct? (list baker cooper fletcher miller smith)))
                                                          (baker-iter (cdr baker-list))
                                                          (list (list 'baker baker)
                                                                (list 'cooper cooper)
                                                                (list 'fletcher fletcher)
                                                                (list 'miller miller)
                                                                (list 'smith smith))))))))))))))))))))))

(display (multiple-dwelling))
(newline)
